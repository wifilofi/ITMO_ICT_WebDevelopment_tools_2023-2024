{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\" \u0420\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0443\u0447\u0435\u043d\u0438\u043a \u0433\u0440\u0443\u043f\u043f\u044b K33402 \u041c\u043e\u0441\u0438\u043d \u0417\u0430\u0445\u0430\u0440. \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b: \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\""},{"location":"#web-","text":"\u0420\u0430\u0431\u043e\u0442\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0443\u0447\u0435\u043d\u0438\u043a \u0433\u0440\u0443\u043f\u043f\u044b K33402 \u041c\u043e\u0441\u0438\u043d \u0417\u0430\u0445\u0430\u0440.","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\""},{"location":"#_1","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2 \u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u044b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab_1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161 \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. \u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d: \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b main.py: import uvicorn from fastapi import FastAPI from sqlmodel import SQLModel from db.db import engine from endpoints.user_endpoints import user_router from endpoints.money_endpoints import main_router from models.user_models import * app = FastAPI() app.include_router(user_router) app.include_router(main_router, prefix=\"/api\") def create_db(): SQLModel.metadata.create_all(engine) @app.on_event(\"startup\") def on_startup(): create_db() if __name__ == '__main__': uvicorn.run(app, host='localhost', port=8001) auth.py: import datetime from fastapi import Security, HTTPException from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from sqlmodel import Session, select from starlette import status from dotenv import load_dotenv import os from db.db import engine from models.user_models import User load_dotenv() secret_key = os.getenv(\"SECRET_KEY\") def find_user(name): with Session(engine) as session: statement = select(User).where(User.username == name) return session.exec(statement).first() class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = secret_key def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials) def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = self.decode_token(auth.credentials) if username is None: raise credentials_exception user = find_user(username) if username is None: raise credentials_exception return user money_endpoints.py from fastapi import APIRouter, HTTPException, Depends from typing import List from sqlmodel import Session from endpoints.user_endpoints import auth_handler from models.money_models import Balance, Target, Transactions, TargetCreate, TargetUpdate, TransactionsCreate, Category, \\ TransactionsUpdate, UserBalance, TargetResponse from db.db import session main_router = APIRouter() @main_router.get(\"/balances/{balance_id}\", response_model=UserBalance) def get_balance(balance_id: int): balance = session.get(Balance, balance_id) if not balance: raise HTTPException(status_code=404, detail=\"Balance not found\") return balance @main_router.post(\"/balances/{balance_id}/targets/\", response_model=Target) def create_target_for_balance(balance_id: int, target: TargetCreate, user=Depends(auth_handler.auth_wrapper)): db_balance = session.get(Balance, balance_id) if db_balance is None: raise HTTPException(status_code=404, detail=\"Balance not found\") if target.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") db_target = Target(**target.dict(), balance_id=balance_id) session.add(db_target) session.commit() session.refresh(db_target) return db_target @main_router.put(\"/balances/{balance_id}/targets/{target_id}\", response_model=Target) def update_target_for_balance(balance_id: int, target_id: int, target: TargetUpdate, user=Depends(auth_handler.auth_wrapper)): db_target = session.get(Target, target_id) if db_target is None: raise HTTPException(status_code=404, detail=\"Target not found\") if target.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") for key, value in target.dict(exclude_unset=True).items(): setattr(db_target, key, value) session.add(db_target) session.commit() session.refresh(db_target) return db_target @main_router.delete(\"/balances/{balance_id}/targets/{target_id}\") def delete_target_for_balance(balance_id: int, target_id: int, user=Depends(auth_handler.auth_wrapper)): db_target = session.get(Target, target_id) if db_target is None: raise HTTPException(status_code=404, detail=\"Target not found\") session.delete(db_target) session.commit() return {\"message\": \"Target deleted\"} @main_router.get(\"/balances/{balance_id}/targets/\", response_model=List[TargetResponse]) def get_targets_for_balance(balance_id: int): targets = session.query(Target).filter(Target.balance_id == balance_id).all() if not targets: raise HTTPException(status_code=404, detail=\"Targets not found for this balance\") return targets @main_router.post(\"/balances/{balance_id}/transactions/\", response_model=Transactions) def create_transaction_for_balance(balance_id: int, transaction: TransactionsCreate, user=Depends(auth_handler.auth_wrapper)): db_balance = session.get(Balance, balance_id) if db_balance is None: raise HTTPException(status_code=404, detail=\"Balance not found\") if transaction.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") db_transaction = Transactions(**transaction.dict(), balance_id=balance_id) session.add(db_transaction) session.commit() session.refresh(db_transaction) return db_transaction @main_router.put(\"/transactions/{transaction_id}\", response_model=Transactions) def update_transaction(transaction_id: int, transaction: TransactionsUpdate, user=Depends(auth_handler.auth_wrapper)): db_transaction = session.get(Transactions, transaction_id) if db_transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") if transaction.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") for key, value in transaction.dict(exclude_unset=True).items(): setattr(db_transaction, key, value) session.add(db_transaction) session.commit() session.refresh(db_transaction) return db_transaction @main_router.delete(\"/balances/{balance_id}/transactions/{transaction_id}\") def delete_transaction_for_balance(balance_id: int, transaction_id: int, user=Depends(auth_handler.auth_wrapper)): db_transaction = session.get(Transactions, transaction_id) if db_transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") session.delete(db_transaction) session.commit() return {\"message\": \"Transaction deleted\"} @main_router.get(\"/balances/{balance_id}/transactions/\", response_model=List[Transactions]) def get_transactions_for_balance(balance_id: int): db_balance = session.get(Balance, balance_id) if db_balance is None: raise HTTPException(status_code=404, detail=\"Balance not found\") return db_balance.transactions user_endpoints.py from fastapi import APIRouter, HTTPException, Depends from sqlmodel import Session, select from starlette.responses import JSONResponse from starlette.status import HTTP_201_CREATED from auth.auth import AuthHandler from models.money_models import Balance from models.user_models import UserInput, User, UserLogin from db.db import session, engine user_router = APIRouter() auth_handler = AuthHandler() def find_user(name): with Session(engine) as session: statement = select(User).where(User.username == name) return session.exec(statement).first() def select_all_users(): with Session(engine) as session: statement = select(User) res = session.exec(statement).all() return res @user_router.post('/registration', status_code=201, tags=['users'], description='Register new user') def register(user: UserInput): users = select_all_users() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = auth_handler.get_password_hash(user.password) balance = Balance(balance=0) u = User(username=user.username, password=hashed_pwd, email=user.email, balance=balance) session.add_all([u, balance]) session.commit() return JSONResponse(status_code=201, content={\"message\": \"User registered successfully\"}) @user_router.post('/login', tags=['users']) def login(user: UserLogin): user_found = find_user(user.username) if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = auth_handler.verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = auth_handler.encode_token(user_found.username) return {'token': token} @user_router.post('/users/me', tags=['users']) def get_current_user(user: User = Depends(auth_handler.get_current_user)): return user.username money_models.py: from enum import Enum from sqlmodel import SQLModel, Field, Relationship from typing import Optional, List from models.user_models import User class Category(str, Enum): FOOD = \"Food\" TRANSPORTATION = \"Transportation\" ENTERTAINMENT = \"Entertainment\" SHOPPING = \"Shopping\" BILLS = \"Bills\" SALARY = \"Salary\" SAVINGS = \"Savings\" OTHER = \"Other\" class TransactionsType(str, Enum): INCOME = \"income\" EXPENSES = \"expenses\" class TargetDeafult(SQLModel): category: Category = Category.OTHER value: int = 0 balance_id: int = Field(foreign_key=\"balance.id\") class Target(TargetDeafult, table=True): id: int = Field(primary_key=True) balance: Optional[\"Balance\"] = Relationship(back_populates=\"targets\") class Transactions(SQLModel, table=True): id: int = Field(primary_key=True) category: Category = Category.OTHER value: int = 0 type: TransactionsType = TransactionsType.INCOME balance_id: int = Field(foreign_key=\"balance.id\") balance: Optional[\"Balance\"] = Relationship(back_populates=\"transactions\") class BalanceDeafult(SQLModel): balance: int = 0 user_id: Optional[int] = Field(foreign_key=\"user.id\") class Balance(BalanceDeafult, table=True): id: int = Field(primary_key=True) user: Optional[User] = Relationship(back_populates=\"balance\") transactions: List[Transactions] = Relationship(back_populates=\"balance\") targets: List[Target] = Relationship(back_populates=\"balance\") class UserBalance(BalanceDeafult): transactions: List[Transactions] = None targets: List[Target] = None class TargetResponse(TargetDeafult): balance: Optional[Balance] = None class TargetCreate(SQLModel): category: Category value: int class TargetUpdate(SQLModel): category: Category value: int class TransactionsCreate(SQLModel): category: Category type: TransactionsType value: int class TransactionsUpdate(SQLModel): category: Category type: TransactionsType value: int user_models.py: import datetime from enum import Enum from typing import Optional, List from pydantic import validator from sqlmodel import SQLModel, Field, Relationship class User(SQLModel, table=True): id: int = Field(primary_key=True) username: str = Field(index=True) password: str email: str balance: Optional[\"Balance\"] = Relationship(back_populates=\"user\") created_at: datetime.datetime = Field(default=datetime.datetime.now()) class UserInput(SQLModel): username: str password: str password2: str email: str @validator('password2') def password_match(cls, v, values, **kwargs): if 'password' in values and v != values['password']: raise ValueError('passwords don\\'t match') return v class UserLogin(SQLModel): username: str password: str db.py from sqlmodel import create_engine, Session import os from dotenv import load_dotenv load_dotenv() postgres_url = os.getenv('DB_URL') db_url = postgres_url engine = create_engine(db_url, echo=True) session = Session(bind=engine) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_1/#no1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0434\u0430\u0447\u0430 - \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u042d\u0442\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0431\u043b\u0435\u0433\u0447\u0430\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b, \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043e\u0431\u043c\u0435\u043d\u0430 \u043a\u043d\u0438\u0433\u0430\u043c\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0444\u0438\u043b\u0435\u0439: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0444\u0438\u043b\u0438, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0435\u0431\u0435, \u0441\u0432\u043e\u0438\u0445 \u043d\u0430\u0432\u044b\u043a\u0430\u0445, \u043e\u043f\u044b\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0442\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043a\u043d\u0438\u0433\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0433\u043e\u0442\u043e\u0432\u044b \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c\u0441\u044f, \u0432 \u0441\u0432\u043e\u044e \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. \u041f\u043e\u0438\u0441\u043a \u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d: \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u0438\u0441\u043a\u0430 \u043a\u043d\u0438\u0433 \u0432 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u043a\u043d\u0438\u0433\u0430\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0438 \u043e\u0431\u043c\u0435\u043d\u0430\u043c\u0438: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u043b\u0438 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u043e\u0431\u043c\u0435\u043d.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21161"},{"location":"lab_1/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab_1/#mainpy","text":"import uvicorn from fastapi import FastAPI from sqlmodel import SQLModel from db.db import engine from endpoints.user_endpoints import user_router from endpoints.money_endpoints import main_router from models.user_models import * app = FastAPI() app.include_router(user_router) app.include_router(main_router, prefix=\"/api\") def create_db(): SQLModel.metadata.create_all(engine) @app.on_event(\"startup\") def on_startup(): create_db() if __name__ == '__main__': uvicorn.run(app, host='localhost', port=8001)","title":"main.py:"},{"location":"lab_1/#authpy","text":"import datetime from fastapi import Security, HTTPException from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from sqlmodel import Session, select from starlette import status from dotenv import load_dotenv import os from db.db import engine from models.user_models import User load_dotenv() secret_key = os.getenv(\"SECRET_KEY\") def find_user(name): with Session(engine) as session: statement = select(User).where(User.username == name) return session.exec(statement).first() class AuthHandler: security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret = secret_key def get_password_hash(self, password): return self.pwd_context.hash(password) def verify_password(self, pwd, hashed_pwd): return self.pwd_context.verify(pwd, hashed_pwd) def encode_token(self, user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, self.secret, algorithm='HS256') def decode_token(self, token): try: payload = jwt.decode(token, self.secret, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(self, auth: HTTPAuthorizationCredentials = Security(security)): return self.decode_token(auth.credentials) def get_current_user(self, auth: HTTPAuthorizationCredentials = Security(security)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = self.decode_token(auth.credentials) if username is None: raise credentials_exception user = find_user(username) if username is None: raise credentials_exception return user","title":"auth.py:"},{"location":"lab_1/#money_endpointspy","text":"from fastapi import APIRouter, HTTPException, Depends from typing import List from sqlmodel import Session from endpoints.user_endpoints import auth_handler from models.money_models import Balance, Target, Transactions, TargetCreate, TargetUpdate, TransactionsCreate, Category, \\ TransactionsUpdate, UserBalance, TargetResponse from db.db import session main_router = APIRouter() @main_router.get(\"/balances/{balance_id}\", response_model=UserBalance) def get_balance(balance_id: int): balance = session.get(Balance, balance_id) if not balance: raise HTTPException(status_code=404, detail=\"Balance not found\") return balance @main_router.post(\"/balances/{balance_id}/targets/\", response_model=Target) def create_target_for_balance(balance_id: int, target: TargetCreate, user=Depends(auth_handler.auth_wrapper)): db_balance = session.get(Balance, balance_id) if db_balance is None: raise HTTPException(status_code=404, detail=\"Balance not found\") if target.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") db_target = Target(**target.dict(), balance_id=balance_id) session.add(db_target) session.commit() session.refresh(db_target) return db_target @main_router.put(\"/balances/{balance_id}/targets/{target_id}\", response_model=Target) def update_target_for_balance(balance_id: int, target_id: int, target: TargetUpdate, user=Depends(auth_handler.auth_wrapper)): db_target = session.get(Target, target_id) if db_target is None: raise HTTPException(status_code=404, detail=\"Target not found\") if target.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") for key, value in target.dict(exclude_unset=True).items(): setattr(db_target, key, value) session.add(db_target) session.commit() session.refresh(db_target) return db_target @main_router.delete(\"/balances/{balance_id}/targets/{target_id}\") def delete_target_for_balance(balance_id: int, target_id: int, user=Depends(auth_handler.auth_wrapper)): db_target = session.get(Target, target_id) if db_target is None: raise HTTPException(status_code=404, detail=\"Target not found\") session.delete(db_target) session.commit() return {\"message\": \"Target deleted\"} @main_router.get(\"/balances/{balance_id}/targets/\", response_model=List[TargetResponse]) def get_targets_for_balance(balance_id: int): targets = session.query(Target).filter(Target.balance_id == balance_id).all() if not targets: raise HTTPException(status_code=404, detail=\"Targets not found for this balance\") return targets @main_router.post(\"/balances/{balance_id}/transactions/\", response_model=Transactions) def create_transaction_for_balance(balance_id: int, transaction: TransactionsCreate, user=Depends(auth_handler.auth_wrapper)): db_balance = session.get(Balance, balance_id) if db_balance is None: raise HTTPException(status_code=404, detail=\"Balance not found\") if transaction.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") db_transaction = Transactions(**transaction.dict(), balance_id=balance_id) session.add(db_transaction) session.commit() session.refresh(db_transaction) return db_transaction @main_router.put(\"/transactions/{transaction_id}\", response_model=Transactions) def update_transaction(transaction_id: int, transaction: TransactionsUpdate, user=Depends(auth_handler.auth_wrapper)): db_transaction = session.get(Transactions, transaction_id) if db_transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") if transaction.category not in Category: raise HTTPException(status_code=400, detail=\"Invalid category\") for key, value in transaction.dict(exclude_unset=True).items(): setattr(db_transaction, key, value) session.add(db_transaction) session.commit() session.refresh(db_transaction) return db_transaction @main_router.delete(\"/balances/{balance_id}/transactions/{transaction_id}\") def delete_transaction_for_balance(balance_id: int, transaction_id: int, user=Depends(auth_handler.auth_wrapper)): db_transaction = session.get(Transactions, transaction_id) if db_transaction is None: raise HTTPException(status_code=404, detail=\"Transaction not found\") session.delete(db_transaction) session.commit() return {\"message\": \"Transaction deleted\"} @main_router.get(\"/balances/{balance_id}/transactions/\", response_model=List[Transactions]) def get_transactions_for_balance(balance_id: int): db_balance = session.get(Balance, balance_id) if db_balance is None: raise HTTPException(status_code=404, detail=\"Balance not found\") return db_balance.transactions","title":"money_endpoints.py"},{"location":"lab_1/#user_endpointspy","text":"from fastapi import APIRouter, HTTPException, Depends from sqlmodel import Session, select from starlette.responses import JSONResponse from starlette.status import HTTP_201_CREATED from auth.auth import AuthHandler from models.money_models import Balance from models.user_models import UserInput, User, UserLogin from db.db import session, engine user_router = APIRouter() auth_handler = AuthHandler() def find_user(name): with Session(engine) as session: statement = select(User).where(User.username == name) return session.exec(statement).first() def select_all_users(): with Session(engine) as session: statement = select(User) res = session.exec(statement).all() return res @user_router.post('/registration', status_code=201, tags=['users'], description='Register new user') def register(user: UserInput): users = select_all_users() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = auth_handler.get_password_hash(user.password) balance = Balance(balance=0) u = User(username=user.username, password=hashed_pwd, email=user.email, balance=balance) session.add_all([u, balance]) session.commit() return JSONResponse(status_code=201, content={\"message\": \"User registered successfully\"}) @user_router.post('/login', tags=['users']) def login(user: UserLogin): user_found = find_user(user.username) if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = auth_handler.verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = auth_handler.encode_token(user_found.username) return {'token': token} @user_router.post('/users/me', tags=['users']) def get_current_user(user: User = Depends(auth_handler.get_current_user)): return user.username","title":"user_endpoints.py"},{"location":"lab_1/#money_modelspy","text":"from enum import Enum from sqlmodel import SQLModel, Field, Relationship from typing import Optional, List from models.user_models import User class Category(str, Enum): FOOD = \"Food\" TRANSPORTATION = \"Transportation\" ENTERTAINMENT = \"Entertainment\" SHOPPING = \"Shopping\" BILLS = \"Bills\" SALARY = \"Salary\" SAVINGS = \"Savings\" OTHER = \"Other\" class TransactionsType(str, Enum): INCOME = \"income\" EXPENSES = \"expenses\" class TargetDeafult(SQLModel): category: Category = Category.OTHER value: int = 0 balance_id: int = Field(foreign_key=\"balance.id\") class Target(TargetDeafult, table=True): id: int = Field(primary_key=True) balance: Optional[\"Balance\"] = Relationship(back_populates=\"targets\") class Transactions(SQLModel, table=True): id: int = Field(primary_key=True) category: Category = Category.OTHER value: int = 0 type: TransactionsType = TransactionsType.INCOME balance_id: int = Field(foreign_key=\"balance.id\") balance: Optional[\"Balance\"] = Relationship(back_populates=\"transactions\") class BalanceDeafult(SQLModel): balance: int = 0 user_id: Optional[int] = Field(foreign_key=\"user.id\") class Balance(BalanceDeafult, table=True): id: int = Field(primary_key=True) user: Optional[User] = Relationship(back_populates=\"balance\") transactions: List[Transactions] = Relationship(back_populates=\"balance\") targets: List[Target] = Relationship(back_populates=\"balance\") class UserBalance(BalanceDeafult): transactions: List[Transactions] = None targets: List[Target] = None class TargetResponse(TargetDeafult): balance: Optional[Balance] = None class TargetCreate(SQLModel): category: Category value: int class TargetUpdate(SQLModel): category: Category value: int class TransactionsCreate(SQLModel): category: Category type: TransactionsType value: int class TransactionsUpdate(SQLModel): category: Category type: TransactionsType value: int","title":"money_models.py:"},{"location":"lab_1/#user_modelspy","text":"import datetime from enum import Enum from typing import Optional, List from pydantic import validator from sqlmodel import SQLModel, Field, Relationship class User(SQLModel, table=True): id: int = Field(primary_key=True) username: str = Field(index=True) password: str email: str balance: Optional[\"Balance\"] = Relationship(back_populates=\"user\") created_at: datetime.datetime = Field(default=datetime.datetime.now()) class UserInput(SQLModel): username: str password: str password2: str email: str @validator('password2') def password_match(cls, v, values, **kwargs): if 'password' in values and v != values['password']: raise ValueError('passwords don\\'t match') return v class UserLogin(SQLModel): username: str password: str","title":"user_models.py:"},{"location":"lab_1/#dbpy","text":"from sqlmodel import create_engine, Session import os from dotenv import load_dotenv load_dotenv() postgres_url = os.getenv('DB_URL') db_url = postgres_url engine = create_engine(db_url, echo=True) session = Session(bind=engine)","title":"db.py"},{"location":"lab_1/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab_2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043d\u044f\u0442\u0438\u0439. \u0417\u0430\u0434\u0430\u0447\u0430 \u21161 \u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b sum_asyncio.py: import asyncio async def calculate_sum(start, end): return sum(range(start, end)) async def main(): chunk_size = 100000 tasks = [] for i in range(0, 1000000, chunk_size): tasks.append(calculate_sum(i+1, i+chunk_size+1)) partial_sums = await asyncio.gather(*tasks) total_sum = sum(partial_sums) print(\"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\", total_sum) if __name__ == \"__main__\": import time start_time = time.time() asyncio.run(main()) print(\"\u0417\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f:\", time.time() - start_time) sum_multiprocessing.py: from multiprocessing import Process, Queue def calculate_sum(start, end, result_queue): partial_sum = sum(range(start, end)) result_queue.put(partial_sum) def main(): result_queue = Queue() processes = [] chunk_size = 100000 for i in range(0, 1000000, chunk_size): process = Process(target=calculate_sum, args=(i+1, i+chunk_size+1, result_queue)) process.start() processes.append(process) for process in processes: process.join() total_sum = 0 while not result_queue.empty(): total_sum += result_queue.get() print(\"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\", total_sum) if __name__ == \"__main__\": import time start_time = time.time() main() print(\"\u0417\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f:\", time.time() - start_time) sum_threading.py: import threading def calculate_sum(start, end, result): partial_sum = sum(range(start, end)) result.append(partial_sum) def main(): result = [] threads = [] chunk_size = 100000 for i in range(0, 1000000, chunk_size): thread = threading.Thread(target=calculate_sum, args=(i + 1, i + chunk_size + 1, result)) thread.start() threads.append(thread) for thread in threads: thread.join() total_sum = sum(result) print(\"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\", total_sum) if __name__ == \"__main__\": import time start_time = time.time() main() print(\"\u0417\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f:\", time.time() - start_time) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0417\u0430\u0434\u0430\u0447\u0430 \u21162 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 PostgreSQL \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u0448 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b parse_asyncio.py: import asyncio import aiohttp import time import requests from bs4 import BeautifulSoup import asyncpg from task_2.db import init_db from models import * from urls import URLS import urllib.parse QUERY = \"\"\"INSERT INTO flat (size, cost) VALUES ($1, $2)\"\"\" async def parse_and_save(url, db_pool): try: async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session: async with session.get(url) as response: r = await response.text(encoding='utf-8', errors='ignore') soup = BeautifulSoup(r, 'html.parser') flats = soup.find_all('div', class_=\"catalog-block-item\") for flat in flats: try: size = flat.find('div', class_='catalog-block-item-name').get_text().strip() print(size) cost = flat.find('div', class_='catalog-block-item-price').find('div',class_='catalog-block-item-price-total hidden').get_text().strip() await db_pool.fetch(QUERY, size, cost) except Exception as e: print(e) except Exception as ex: print(ex) async def main(): tasks = [] db_pool = await asyncpg.create_pool('postgresql://postgres:Scalapendra1219212712192127@localhost:5433/flat_db') for url in URLS: task = asyncio.create_task(parse_and_save(url, db_pool)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == '__main__': init_db() start_time = time.time() asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) asyncio.run(main()) end_time = time.time() print(f\"Async time ': {end_time - start_time} seconds\") parse_multiprocessing.py import multiprocessing import time import requests from bs4 import BeautifulSoup from task_2.db import ses, init_db from models import * from urls import URLS def parse_and_save(queue,url): r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') flats = soup.find_all('div', class_=\"catalog-block-item\") for flat in flats: try: size = flat.find('div', class_='catalog-block-item-name').get_text().strip() cost = flat.find('div', class_='catalog-block-item-price').find('div',class_='catalog-block-item-price-total hidden').get_text().strip() queue.put((size, cost)) except Exception: pass queue.put(None) if __name__ == '__main__': init_db() start_time = time.time() queue = multiprocessing.Queue() processes = [] for url in URLS: process = multiprocessing.Process(target=parse_and_save,args=(queue, url)) processes.append(process) process.start() len_proc = len(URLS) while len_proc>0: data = queue.get() if data is None: len_proc = len_proc - 1 else: size, cost = data[0], data[1] flat = Flat(size=size, cost = cost) ses.add(flat) ses.commit() end_time = time.time() print(f\"Multiprocessing time ': {end_time - start_time} seconds\") parse_threading.py import threading import time import requests from bs4 import BeautifulSoup from task_2.db import ses, init_db from models import * from urls import URLS lock = threading.Lock() def parse_and_save(url): r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') flats = soup.find_all('div', class_=\"catalog-block-item\") for flat in flats: try: size = flat.find('div', class_ = 'catalog-block-item-name').get_text().strip() print(size) cost = flat.find('div', class_='catalog-block-item-price').find('div', class_='catalog-block-item-price-total hidden').get_text().strip() print(cost) lock.acquire() res = Flat(size = size, cost = cost) ses.add(res) ses.commit() lock.release() except Exception as e: pass if __name__ == '__main__': init_db() start_time = time.time() threads = [] for url in URLS: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() end_time = time.time() print(f\"Threading time ': {end_time - start_time} seconds\") \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_2/#no2","text":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u043f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u043d\u044f\u0442\u0438\u0439.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21162"},{"location":"lab_2/#no1","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21161"},{"location":"lab_2/#_1","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab_2/#sum_asynciopy","text":"import asyncio async def calculate_sum(start, end): return sum(range(start, end)) async def main(): chunk_size = 100000 tasks = [] for i in range(0, 1000000, chunk_size): tasks.append(calculate_sum(i+1, i+chunk_size+1)) partial_sums = await asyncio.gather(*tasks) total_sum = sum(partial_sums) print(\"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\", total_sum) if __name__ == \"__main__\": import time start_time = time.time() asyncio.run(main()) print(\"\u0417\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f:\", time.time() - start_time)","title":"sum_asyncio.py:"},{"location":"lab_2/#sum_multiprocessingpy","text":"from multiprocessing import Process, Queue def calculate_sum(start, end, result_queue): partial_sum = sum(range(start, end)) result_queue.put(partial_sum) def main(): result_queue = Queue() processes = [] chunk_size = 100000 for i in range(0, 1000000, chunk_size): process = Process(target=calculate_sum, args=(i+1, i+chunk_size+1, result_queue)) process.start() processes.append(process) for process in processes: process.join() total_sum = 0 while not result_queue.empty(): total_sum += result_queue.get() print(\"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\", total_sum) if __name__ == \"__main__\": import time start_time = time.time() main() print(\"\u0417\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f:\", time.time() - start_time)","title":"sum_multiprocessing.py:"},{"location":"lab_2/#sum_threadingpy","text":"import threading def calculate_sum(start, end, result): partial_sum = sum(range(start, end)) result.append(partial_sum) def main(): result = [] threads = [] chunk_size = 100000 for i in range(0, 1000000, chunk_size): thread = threading.Thread(target=calculate_sum, args=(i + 1, i + chunk_size + 1, result)) thread.start() threads.append(thread) for thread in threads: thread.join() total_sum = sum(result) print(\"\u041a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\", total_sum) if __name__ == \"__main__\": import time start_time = time.time() main() print(\"\u0417\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f:\", time.time() - start_time)","title":"sum_threading.py:"},{"location":"lab_2/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab_2/#no2_1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse_and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 PostgreSQL \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u0443\u044e \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u0448 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 \u21162"},{"location":"lab_2/#_3","text":"","title":"\u0425\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab_2/#parse_asynciopy","text":"import asyncio import aiohttp import time import requests from bs4 import BeautifulSoup import asyncpg from task_2.db import init_db from models import * from urls import URLS import urllib.parse QUERY = \"\"\"INSERT INTO flat (size, cost) VALUES ($1, $2)\"\"\" async def parse_and_save(url, db_pool): try: async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session: async with session.get(url) as response: r = await response.text(encoding='utf-8', errors='ignore') soup = BeautifulSoup(r, 'html.parser') flats = soup.find_all('div', class_=\"catalog-block-item\") for flat in flats: try: size = flat.find('div', class_='catalog-block-item-name').get_text().strip() print(size) cost = flat.find('div', class_='catalog-block-item-price').find('div',class_='catalog-block-item-price-total hidden').get_text().strip() await db_pool.fetch(QUERY, size, cost) except Exception as e: print(e) except Exception as ex: print(ex) async def main(): tasks = [] db_pool = await asyncpg.create_pool('postgresql://postgres:Scalapendra1219212712192127@localhost:5433/flat_db') for url in URLS: task = asyncio.create_task(parse_and_save(url, db_pool)) tasks.append(task) await asyncio.gather(*tasks) if __name__ == '__main__': init_db() start_time = time.time() asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy()) asyncio.run(main()) end_time = time.time() print(f\"Async time ': {end_time - start_time} seconds\")","title":"parse_asyncio.py:"},{"location":"lab_2/#parse_multiprocessingpy","text":"import multiprocessing import time import requests from bs4 import BeautifulSoup from task_2.db import ses, init_db from models import * from urls import URLS def parse_and_save(queue,url): r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') flats = soup.find_all('div', class_=\"catalog-block-item\") for flat in flats: try: size = flat.find('div', class_='catalog-block-item-name').get_text().strip() cost = flat.find('div', class_='catalog-block-item-price').find('div',class_='catalog-block-item-price-total hidden').get_text().strip() queue.put((size, cost)) except Exception: pass queue.put(None) if __name__ == '__main__': init_db() start_time = time.time() queue = multiprocessing.Queue() processes = [] for url in URLS: process = multiprocessing.Process(target=parse_and_save,args=(queue, url)) processes.append(process) process.start() len_proc = len(URLS) while len_proc>0: data = queue.get() if data is None: len_proc = len_proc - 1 else: size, cost = data[0], data[1] flat = Flat(size=size, cost = cost) ses.add(flat) ses.commit() end_time = time.time() print(f\"Multiprocessing time ': {end_time - start_time} seconds\")","title":"parse_multiprocessing.py"},{"location":"lab_2/#parse_threadingpy","text":"import threading import time import requests from bs4 import BeautifulSoup from task_2.db import ses, init_db from models import * from urls import URLS lock = threading.Lock() def parse_and_save(url): r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') flats = soup.find_all('div', class_=\"catalog-block-item\") for flat in flats: try: size = flat.find('div', class_ = 'catalog-block-item-name').get_text().strip() print(size) cost = flat.find('div', class_='catalog-block-item-price').find('div', class_='catalog-block-item-price-total hidden').get_text().strip() print(cost) lock.acquire() res = Flat(size = size, cost = cost) ses.add(res) ses.commit() lock.release() except Exception as e: pass if __name__ == '__main__': init_db() start_time = time.time() threads = [] for url in URLS: thread = threading.Thread(target=parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() end_time = time.time() print(f\"Threading time ': {end_time - start_time} seconds\")","title":"parse_threading.py"},{"location":"lab_2/#_4","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"lab_3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163 \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u043b\u0441\u044f \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0447\u0435\u0440\u0435\u0437 Fast-Api \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Celery \u0438 Redis \u0431\u044b\u043b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0432\u044b\u0437\u043e\u0432 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. \u041a\u043e\u0434 docker-compose.yml version: \"3.9\" services: db: image: postgres:15 container_name: db_10 command: -p 1221 expose: - 1221 env_file: - .env redis: image: redis:7 container_name: redis_10 command: --port 5370 expose: - 5370 app: build: context: . env_file: - .env container_name: api_10 depends_on: - db - redis ports: - 8080:8080 celery: build: context: . container_name: celery_10 env_file: - .env command: [\"/lab3/docker/celery.sh\"] depends_on: - app - redis - db \u041a\u043e\u0434 Dockerfile FROM python:3.11 WORKDIR /lab3 COPY requirements.txt . RUN pip3 install -r requirements.txt COPY . . RUN chmod a+x docker/*.sh CMD gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8080 \u041a\u043e\u0434 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430 @app.get(\"/parse/{page_num}\") async def parse_radio(page_num: int): parse_flat.delay(f'https://get-balance.ru/flats/?data%5BPAGE%5D%5Bname%5D=PAGE&data%5BPAGE%5D%5Bvalue%5D={page_num}') return {\"ok\": True} \u041a\u043e\u0434 worker.py import asyncio from sqlalchemy.dialects.postgresql import asyncpg from config import * from celery import Celery from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from flat_parse import parse_and_save broker = f'redis://{REDIS_HOST}:{REDIS_PORT}' worker = Celery('tasks', broker=broker) DATABASE_URL = f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\" engine = create_engine(DATABASE_URL) Session = sessionmaker(bind=engine) db_session = Session() @worker.task(name='Parse') def parse_flat(url: str): asyncio.run(parse_and_save(url, DATABASE_URL)) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab_3/#no3","text":"\u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b \u0441\u043e\u0437\u0434\u0430\u043d \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0437\u044b\u0432\u0430\u043b\u0441\u044f \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0447\u0435\u0440\u0435\u0437 Fast-Api \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Celery \u0438 Redis \u0431\u044b\u043b \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043d \u0432\u044b\u0437\u043e\u0432 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0435\u0440\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163"},{"location":"lab_3/#docker-composeyml","text":"version: \"3.9\" services: db: image: postgres:15 container_name: db_10 command: -p 1221 expose: - 1221 env_file: - .env redis: image: redis:7 container_name: redis_10 command: --port 5370 expose: - 5370 app: build: context: . env_file: - .env container_name: api_10 depends_on: - db - redis ports: - 8080:8080 celery: build: context: . container_name: celery_10 env_file: - .env command: [\"/lab3/docker/celery.sh\"] depends_on: - app - redis - db","title":"\u041a\u043e\u0434 docker-compose.yml"},{"location":"lab_3/#dockerfile","text":"FROM python:3.11 WORKDIR /lab3 COPY requirements.txt . RUN pip3 install -r requirements.txt COPY . . RUN chmod a+x docker/*.sh CMD gunicorn main:app --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8080","title":"\u041a\u043e\u0434 Dockerfile"},{"location":"lab_3/#_1","text":"@app.get(\"/parse/{page_num}\") async def parse_radio(page_num: int): parse_flat.delay(f'https://get-balance.ru/flats/?data%5BPAGE%5D%5Bname%5D=PAGE&data%5BPAGE%5D%5Bvalue%5D={page_num}') return {\"ok\": True}","title":"\u041a\u043e\u0434 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u0430"},{"location":"lab_3/#workerpy","text":"import asyncio from sqlalchemy.dialects.postgresql import asyncpg from config import * from celery import Celery from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from flat_parse import parse_and_save broker = f'redis://{REDIS_HOST}:{REDIS_PORT}' worker = Celery('tasks', broker=broker) DATABASE_URL = f\"postgresql://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}\" engine = create_engine(DATABASE_URL) Session = sessionmaker(bind=engine) db_session = Session() @worker.task(name='Parse') def parse_flat(url: str): asyncio.run(parse_and_save(url, DATABASE_URL))","title":"\u041a\u043e\u0434 worker.py"},{"location":"lab_3/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"}]}